From 21b97407f1c5de5e6ab002df9fd7fae58b4f027d Mon Sep 17 00:00:00 2001
From: David Halls <dahalls@gmail.com>
Date: Mon, 28 Oct 2013 10:18:37 +0000
Subject: [PATCH] Allow hash function to be passed into OAEP operations

---
 ext/rsa.js  | 26 +++++++++++++++-----------
 ext/rsa2.js | 28 ++++++++++++++++------------
 2 files changed, 31 insertions(+), 23 deletions(-)

diff --git a/ext/rsa.js b/ext/rsa.js
index 2007296..ee2f726 100644
--- a/ext/rsa.js
+++ b/ext/rsa.js
@@ -80,28 +80,32 @@ function oaep_mgf1_arr(seed, len, hash)
     return mask;
 }
 
-var SHA1_SIZE = 20;
-
 // PKCS#1 (OAEP) pad input string s to n bytes, and return a bigint
-function oaep_pad(s, n, hash)
+function oaep_pad(s, n, hash, hashLen)
 {
-    if (s.length + 2 * SHA1_SIZE + 2 > n)
+    if (!hash)
+    {
+        hash = rstr_sha1;
+        hashLen = 20;
+    }
+
+    if (s.length + 2 * hashLen + 2 > n)
     {
         throw "Message too long for RSA";
     }
 
     var PS = '', i;
 
-    for (i = 0; i < n - s.length - 2 * SHA1_SIZE - 2; i += 1)
+    for (i = 0; i < n - s.length - 2 * hashLen - 2; i += 1)
     {
         PS += '\x00';
     }
 
-    var DB = rstr_sha1('') + PS + '\x01' + s;
-    var seed = new Array(SHA1_SIZE);
+    var DB = hash('') + PS + '\x01' + s;
+    var seed = new Array(hashLen);
     new SecureRandom().nextBytes(seed);
     
-    var dbMask = oaep_mgf1_arr(seed, DB.length, hash || rstr_sha1);
+    var dbMask = oaep_mgf1_arr(seed, DB.length, hash);
     var maskedDB = [];
 
     for (i = 0; i < DB.length; i += 1)
@@ -109,7 +113,7 @@ function oaep_pad(s, n, hash)
         maskedDB[i] = DB.charCodeAt(i) ^ dbMask.charCodeAt(i);
     }
 
-    var seedMask = oaep_mgf1_arr(maskedDB, seed.length, rstr_sha1);
+    var seedMask = oaep_mgf1_arr(maskedDB, seed.length, hash);
     var maskedSeed = [0];
 
     for (i = 0; i < seed.length; i += 1)
@@ -164,8 +168,8 @@ function RSAEncrypt(text) {
 }
 
 // Return the PKCS#1 OAEP RSA encryption of "text" as an even-length hex string
-function RSAEncryptOAEP(text, hash) {
-  var m = oaep_pad(text, (this.n.bitLength()+7)>>3, hash);
+function RSAEncryptOAEP(text, hash, hashLen) {
+  var m = oaep_pad(text, (this.n.bitLength()+7)>>3, hash, hashLen);
   if(m == null) return null;
   var c = this.doPublic(m);
   if(c == null) return null;
diff --git a/ext/rsa2.js b/ext/rsa2.js
index c470230..3512c36 100644
--- a/ext/rsa2.js
+++ b/ext/rsa2.js
@@ -50,11 +50,15 @@ function oaep_mgf1_str(seed, len, hash)
     return mask;
 }
 
-var SHA1_SIZE = 20;
-
 // Undo PKCS#1 (OAEP) padding and, if valid, return the plaintext
-function oaep_unpad(d, n, hash)
+function oaep_unpad(d, n, hash, hashLen)
 {
+    if (!hash)
+    {
+        hash = rstr_sha1;
+        hashLen = 20;
+    }
+
     d = d.toByteArray();
 
     var i;
@@ -71,15 +75,15 @@ function oaep_unpad(d, n, hash)
 
     d = String.fromCharCode.apply(String, d);
 
-    if (d.length < 2 * SHA1_SIZE + 2)
+    if (d.length < 2 * hashLen + 2)
     {
         throw "Cipher too short";
     }
 
-    var maskedSeed = d.substr(1, SHA1_SIZE)
-    var maskedDB = d.substr(SHA1_SIZE + 1);
+    var maskedSeed = d.substr(1, hashLen)
+    var maskedDB = d.substr(hashLen + 1);
 
-    var seedMask = oaep_mgf1_str(maskedDB, SHA1_SIZE, hash || rstr_sha1);
+    var seedMask = oaep_mgf1_str(maskedDB, hashLen, hash);
     var seed = [], i;
 
     for (i = 0; i < maskedSeed.length; i += 1)
@@ -88,7 +92,7 @@ function oaep_unpad(d, n, hash)
     }
 
     var dbMask = oaep_mgf1_str(String.fromCharCode.apply(String, seed),
-                           d.length - SHA1_SIZE, rstr_sha1);
+                           d.length - hashLen, hash);
 
     var DB = [];
 
@@ -99,12 +103,12 @@ function oaep_unpad(d, n, hash)
 
     DB = String.fromCharCode.apply(String, DB);
 
-    if (DB.substr(0, SHA1_SIZE) !== rstr_sha1(''))
+    if (DB.substr(0, hashLen) !== hash(''))
     {
         throw "Hash mismatch";
     }
 
-    DB = DB.substr(SHA1_SIZE);
+    DB = DB.substr(hashLen);
 
     var first_one = DB.indexOf('\x01');
     var last_zero = (first_one != -1) ? DB.substr(0, first_one).lastIndexOf('\x00') : -1;
@@ -220,11 +224,11 @@ function RSADecrypt(ctext) {
 
 // Return the PKCS#1 OAEP RSA decryption of "ctext".
 // "ctext" is an even-length hex string and the output is a plain string.
-function RSADecryptOAEP(ctext, hash) {
+function RSADecryptOAEP(ctext, hash, hashLen) {
   var c = parseBigInt(ctext, 16);
   var m = this.doPrivate(c);
   if(m == null) return null;
-  return oaep_unpad(m, (this.n.bitLength()+7)>>3, hash);
+  return oaep_unpad(m, (this.n.bitLength()+7)>>3, hash, hashLen);
 }
 
 // Return the PKCS#1 RSA decryption of "ctext".
-- 
1.8.4
